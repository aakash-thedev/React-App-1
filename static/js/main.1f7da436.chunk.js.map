{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","i","src_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredRobots","filter","toLowerCase","includes","length","shadow-5","src_SearchBox","src_Scroll","src_CardList","Component","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCLSC,EAXF,SAAAC,GAAsB,IAApBC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GAC3B,OACSC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAA1B,YAAwCO,IAAI,WACnDN,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,cAAML,EAAN,KACAG,EAAAC,EAAAC,cAAA,aAAKJ,EAAL,QCcGS,EAnBE,SAAAX,GAAgB,IAAbY,EAAaZ,EAAbY,OACnB,OACER,EAAAC,EAAAC,cAAA,WAGEM,EAAOC,IAAI,SAACC,EAAKC,GACZ,OACDX,EAAAC,EAAAC,cAACU,EAAD,CACLC,IAAKF,EACLZ,GAAIS,EAAOG,GAAGZ,GACdF,KAAMW,EAAOG,GAAGd,KAChBC,MAAOU,EAAOG,GAAGb,YCCNgB,EAZG,SAAAlB,GAAoB,IAAlBmB,EAAkBnB,EAAlBmB,aACjB,OACEf,EAAAC,EAAAC,cAAA,WACQF,EAAAC,EAAAC,cAAA,SACCC,UAAU,aACVa,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCEXI,SAVA,SAACC,GAEf,OAECpB,EAAAC,EAAAC,cAAA,OAAKmB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UAChEJ,EAAMK,YC4CGC,cA1Cd,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaFI,eAAiB,SAACC,GACjBR,EAAKS,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAbnCZ,EAAKa,MAAQ,CACZhC,OAAQ,GACR6B,YAAa,IAJPV,mFAOK,IAAAc,EAAAX,KAEnBY,MAAM,8CACJC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAAE5B,OAAQsC,uCAQ/B,IAAAC,EAAAjB,KAEDkB,EAAiBlB,KAAKU,MAAMhC,OAAOyC,OAAO,SAAAzC,GAClD,OAAOA,EAAOX,KAAKqD,cAAcC,SAASJ,EAAKP,MAAMH,YAAYa,iBAE/D,OAAgC,IAA7BpB,KAAKU,MAAMhC,OAAO4C,OACbpD,EAAAC,EAAAC,cAAA,8BAKTF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,KAAKkD,YAAA,GAAnB,iBACArD,EAAAC,EAAAC,cAACoD,EAAD,CAAWvC,aAAce,KAAKI,iBAC7BlC,EAAAC,EAAAC,cAACqD,EAAD,KACCvD,EAAAC,EAAAC,cAACsD,EAAD,CAAUhD,OAAQwC,aAnCLS,aCAlBC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SNyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.1f7da436.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = ({name, email, id}) =>{\n\treturn (\n          <div className='bg-light-blue tc dib br3 pa3 ma2 grow bw2 shadow5'>\n          <img src={`https://robohash.org/${id}?200x200`} alt=\"Aakash\" />\n\t          <div>\n\t\t          <h2> {name} </h2>\n\t\t          <p> {email} </p>\n\t          </div>\n          </div>\n           )\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t  <div>\n\t\t{\n\n\t\t   robots.map((user,i) => {\n\t         return (\n\t\t       <Card\n\t\t\t\tkey={i}\n\t\t\t\tid={robots[i].id}\n\t\t\t\tname={robots[i].name}\n\t\t\t\temail={robots[i].email}\n\t\t       />\n\t\t\t);\n\t\t})\n\t }\n   </div>\n  );\n}\nexport default CardList;","import React from 'react';\n\n\nconst SearchBox = ({searchChange}) => {\n\t  return (\n\t  \t <div>\n             <input\n              className='tc pa3 ma2'\n              type=\"search\"\n              placeholder=\"Search Robots\"\n              onChange = {searchChange}\n             />\n         </div>\n\t\t   )\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\n\treturn (\n\n  <div style={{overflowY: 'scroll', border: '2px solid white', height:'670px'}}>\n     {props.children}\n </div>\n );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport './App.css';\nimport Scroll from './Scroll';\n\n\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n        this.state = {\n        \trobots: [],\n\t        searchfield: ''\n        }\n\t}\ncomponentDidMount() {\n\n\tfetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => this.setState({ robots: users }));\n}\n\nonSearchChange = (event) => {\n\tthis.setState({ searchfield: event.target.value })\n}\n\n\n\trender() {\n\n   const filteredRobots = this.state.robots.filter(robots => {\n\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n})\n   if(this.state.robots.length === 0){\n   \treturn <h1> Loading....... </h1>\n   }\n   else{\n\n\t\treturn (\n \t<div className='tc'>\n\t \t<h1 className='f1' shadow-5> ROBOFRIENDS </h1>\n\t \t<SearchBox searchChange={this.onSearchChange} />\n\t   <Scroll>\n\t \t  <CardList robots={filteredRobots} />\n\t   </Scroll>\n \t</div>\n \t)\n\t}\n  }\n}\n \nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}